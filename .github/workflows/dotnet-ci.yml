
name: .NET CI Build, Test, Analyze (SonarCloud met OpenCover)

# Trigger de workflow bij een push naar de main branch of bij pull requests naar main
on:
  push:
    branches: [ master ] 
  pull_request:
    branches: [ master ] 

jobs:
  build-test-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest # Of windows-latest als je Windows nodig hebt

    steps:
    # Stap 1: Code ophalen uit de repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Nodig voor SonarCloud analyse van pull requests

    # Stap 2: Juiste .NET SDK versie installeren
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x' # !! PAS AAN naar jouw .NET versie !!

    # Stap 3: Cache NuGet packages (optioneel, versnelt builds)
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Stap 4: NuGet dependencies herstellen
    - name: Restore dependencies
      run: dotnet restore

    # Stap 5: SonarScanner tool installeren (als global tool)
    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner
      # Je kunt ook een specifieke versie installeren indien nodig

    # Stap 6: SonarScanner 'begin' stap (configuratie)
    #    Vóór de build/test stap!
    - name: SonarScanner Begin Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # Nodig voor PR analyse
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
            dotnet sonarscanner begin /o:"daviddierckx-1" /k:"daviddierckx_AvansDevOpsProject" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" 


    # Stap 7: Code bouwen (Release configuratie)
    - name: Build project
      run: dotnet build --configuration Release --no-restore

    # Stap 8: Unit Tests uitvoeren MET OpenCover code coverage
    #    Zorg dat 'coverlet.collector' NuGet package is toegevoegd aan je test project
    - name: Run tests with OpenCover coverage
      run: |
        dotnet test --configuration Release --no-build --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./TestResults/coverage.opencover.xml --results-directory ./TestResults

    # Stap 9: SonarScanner 'end' stap (upload resultaten)
    - name: SonarScanner End Analysis
      # env: SONAR_TOKEN niet meer nodig als environment variable hier
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

