# Bestandsnaam: .github/workflows/dotnet-ci.yml

name: .NET CI Build, Test, Analyze (SonarCloud - Coverlet.Console Methode)

on:
  push:
    branches: [ master ] # Of 'master'
  pull_request:
    branches: [ master ] 

jobs:
  build-test-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # Definieer het pad naar het testproject voor herbruikbaarheid
      TEST_PROJECT_PATH: ./AvansDevOps.App.Domain.Tests/AvansDevOps.App.Domain.Tests.csproj

    steps:
    # Stappen 1-4 blijven hetzelfde
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    # Stap 5: Installeer BEIDE tools
    - name: Install SonarScanner and Coverlet Console
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global coverlet.console

    # Stap 6: SonarScanner 'begin' stap met OpenCover.
    - name: SonarScanner Begin Analysis
      run: |
        dotnet sonarscanner begin \
          /o:"daviddierckx-1" \
          /k:"daviddierckx_AvansDevOpsProject" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.login="${{ env.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="./TestResults/coverage.opencover.xml" 

    # Stap 7: Code bouwen
    - name: Build project
      run: dotnet build --configuration Release --no-restore

    # Stap 8: Unit Tests uitvoeren ZONDER coverage.
    - name: Run tests (no coverage collection here)
      run: dotnet test --configuration Release --no-build --logger trx

    # Stap 9: Genereer het coverage-rapport met coverlet.console (DEFINITIEVE FIX)
    - name: Generate Coverage Report with Coverlet
      run: |
        coverlet ${{ env.TEST_PROJECT_PATH }} \
          --target "dotnet" \
          --targetargs "test --no-build --configuration Release" \
          --format opencover \
          --output "./TestResults/coverage.opencover.xml" \
          --include-test-assembly # <-- DE CRUCIALE TOEVOEGING

    # Stap 10: SonarScanner 'end' stap
    - name: SonarScanner End Analysis
      run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
