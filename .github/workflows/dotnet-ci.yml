# Bestandsnaam: .github/workflows/dotnet-ci.yml

name: .NET CI Build, Test, Analyze (SonarCloud - dotnet-coverage)

on:
  push:
    branches: [ master ] # <-- AANGEPAST
  pull_request:
    branches: [ master ] # <-- AANGEPAST

jobs:
  build-test-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SOLUTION_FILE_PATH: . 
      TEST_PROJECT_PATH: ./AvansDevOps.App.Domain.Tests/AvansDevOps.App.Domain.Tests.csproj

    steps:
    # Stap 1: Code ophalen
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    # Stap 2: .NET SDK installeren
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # Stap 3: NuGet packages cachen (optioneel)
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Stap 4: Dependencies herstellen
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

    # Stap 5: Benodigde .NET tools installeren
    - name: Install .NET Tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-coverage

    # Stap 6: SonarScanner 'begin' stap
    - name: SonarScanner Begin Analysis
      run: |
        dotnet sonarscanner begin \
          /o:"daviddierckx-1" \
          /k:"daviddierckx_AvansDevOpsProject" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.login="${{ env.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="./TestResults/coverage.opencover.xml" 

    # Stap 7: Project bouwen
    - name: Build project
      run: dotnet build --configuration Release --no-restore ${{ env.SOLUTION_FILE_PATH }}

    # Stap 8: Unit Tests uitvoeren en coverage genereren
    - name: Run tests and collect coverage
      run: |
        dotnet-coverage collect 'dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build' \
          -f opencover \
          -o './TestResults/coverage.opencover.xml'

    # Stap 9: SonarScanner 'end' stap
    - name: SonarScanner End Analysis
      run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
