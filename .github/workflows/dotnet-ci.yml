# Bestandsnaam: .github/workflows/dotnet-ci.yml

name: .NET CI Build, Test, Analyze (SonarCloud - Definitieve Methode)

on:
  push:
    branches: [ master ] # Aangepast naar jouw 'master' branch
  pull_request:
    branches: [ master ] # Aangepast naar jouw 'master' branch

jobs:
  build-test-analyze:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      TEST_PROJECT_PATH: ./AvansDevOps.App.Domain.Tests/AvansDevOps.App.Domain.Tests.csproj

    steps:
    # 1. Code ophalen
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 

    # 2. .NET SDK installeren
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # 3. Dependencies herstellen
    - name: Restore dependencies
      run: dotnet restore

    # 4. Benodigde .NET tools installeren (inclusief reportgenerator)
    - name: Install .NET Tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    # 5. SonarScanner 'begin' stap (deze is correct)
    - name: SonarScanner Begin Analysis
      run: |
        dotnet sonarscanner begin \
          /o:"daviddierckx-1" \
          /k:"daviddierckx_AvansDevOpsProject" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.login="${{ env.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="./TestResults/coverage.opencover.xml" 

    # 6. Project bouwen
    - name: Build project
      run: dotnet build --configuration Release --no-restore

    # 7. Coverage-rapport genereren (in Cobertura-formaat)
    # Deze stap maakt het werkende Cobertura-bestand, net als Fine Code Coverage lokaal deed.
    - name: Generate Cobertura Coverage Report
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TempCoverage/
      
    # 8. Converteer het Cobertura-rapport naar OpenCover
    # Dit is de cruciale stap die jij lokaal ook hebt uitgevoerd.
    - name: Convert Cobertura to OpenCover
      run: |
        reportgenerator "-reports:./TempCoverage/**/*.xml" "-targetdir:TestResults" "-reporttypes:OpenCover"

    # 9. SonarScanner 'end' stap
    - name: SonarScanner End Analysis
      run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"
