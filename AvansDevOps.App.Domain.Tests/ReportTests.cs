using AvansDevOps.App.Domain.Entities;
using AvansDevOps.App.Domain.Decorators;
using AvansDevOps.App.Domain.Interfaces.Patterns;
using AvansDevOps.App.Domain.Interfaces.Strategies;
using AvansDevOps.App.Domain.ValueObjects;
using Moq;
using System;
using Xunit;
using AvansDevOps.App.Infrastructure.Reporting;

namespace AvansDevOps.App.Domain.Tests
{
    public class ReportTests
    {
        private Sprint CreateDummySprint()
        {
            var sm = new ScrumMaster("SM", "sm@a.com");
            var po = new ProductOwner("PO", "po@a.com");
            var proj = new Project("Proj", po);
            var sprint = new Sprint("Dummy Sprint", DateTime.Now, DateTime.Now.AddDays(1), SprintType.Review, sm, proj);
            sprint.AddTeamMember(new Developer("Dev1", "d1@a.com"));
            sprint.AddBacklogItem(new BacklogItem("Item A", "Desc A"));
            return sprint;
        }

        [Fact]
        public void Test_AC_FR09_1_GenerateContent_For_Base_Report()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var report = new Report("Basis Rapport", sprint);

            // Act
            var content = report.GenerateContent();

            // Assert
            Assert.Contains("Report: Basis Rapport", content);
            Assert.Contains("Sprint: Dummy Sprint", content);
        }

        [Fact]
        public void Test_AC_FR09_2_GenerateContent_With_HeaderDecorator()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Rapport met Header", sprint);
            var headerDecorator = new HeaderDecorator(baseReport, "Avans BV");

            // Act
            var content = headerDecorator.GenerateContent();

            // Assert
            Assert.StartsWith("==================================================", content);
            Assert.Contains("Report Generated by: Avans BV", content);
            Assert.Contains("Report: Rapport met Header", content);
        }

        [Fact]
        public void Test_AC_FR09_3_GenerateContent_With_FooterDecorator()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Rapport met Footer", sprint);
            var footerText = "Vertrouwelijk Document";
            var footerDecorator = new FooterDecorator(baseReport, footerText);

            // Act
            var content = footerDecorator.GenerateContent();

            // Assert
            Assert.Contains("Report: Rapport met Footer", content);
            Assert.Contains("--------------------------------------------------", content);
            Assert.Contains(footerText, content);
            Assert.EndsWith("--------------------------------------------------\r\n", content.Replace("\r\n", "\n").Replace("\n", "\r\n"));
        }

        [Fact]
        public void Test_FR09_GenerateContent_With_Nested_Decorators()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Genest Rapport", sprint);
            var headerText = "Avans Hogeschool";
            var footerText = "Intern Gebruik";

            IReportComponent decoratedReport = new FooterDecorator(new HeaderDecorator(baseReport, headerText), footerText);

            // Act
            var content = decoratedReport.GenerateContent();

            // Assert
            Assert.StartsWith("==================================================", content);
            Assert.Contains(headerText, content);
            Assert.Contains("Report: Genest Rapport", content);
            Assert.Contains(footerText, content);
            Assert.EndsWith("--------------------------------------------------\r\n", content.Replace("\r\n", "\n").Replace("\n", "\r\n"));
        }

        [Fact]
        public void Test_AC_FR09_4_PdfReportStrategy_Calls_Logic()
        {
            // Arrange
            var mockComponent = new Mock<IReportComponent>();
            mockComponent.Setup(c => c.GenerateContent()).Returns("Report Content");
            var strategy = new PdfReportStrategy();
            var filePath = "test_report";

            // Act
            var exception = Record.Exception(() => strategy.GenerateReport(mockComponent.Object, filePath));

            // Assert
            Assert.Null(exception);
            mockComponent.Verify(c => c.GenerateContent(), Times.Once);
        }

        [Fact]
        public void Test_AC_FR09_5_PngReportStrategy_Calls_Logic()
        {
            // Arrange
            var mockComponent = new Mock<IReportComponent>();
            mockComponent.Setup(c => c.GenerateContent()).Returns("Report Content");
            var strategy = new PngReportStrategy();
            var filePath = "test_report";

            // Act
            var exception = Record.Exception(() => strategy.GenerateReport(mockComponent.Object, filePath));

            // Assert
            Assert.Null(exception);
            mockComponent.Verify(c => c.GenerateContent(), Times.Once);
        }

        [Fact]
        public void Test_FR09_ReportStrategies_Return_Correct_Format()
        {
            // Arrange
            var pdfStrategy = new PdfReportStrategy();
            var pngStrategy = new PngReportStrategy();

            // Assert
            Assert.Equal(ReportFormat.Pdf, pdfStrategy.GetFormat());
            Assert.Equal(ReportFormat.Png, pngStrategy.GetFormat());
        }
    }
}