
using AvansDevOps.App.Domain.Entities;
using AvansDevOps.App.Domain.Decorators;
using AvansDevOps.App.Domain.Interfaces.Patterns;
using AvansDevOps.App.Domain.Interfaces.Strategies;
using AvansDevOps.App.Domain.ValueObjects;
using Moq;
using System;
using Xunit;
using AvansDevOps.App.Infrastructure.Reporting;

namespace AvansDevOps.App.Domain.Tests
{
    public class ReportTests
    {
        // Hulpfuncties (vereenvoudigd)
        private Sprint CreateDummySprint()
        {
            var sm = new ScrumMaster("SM", "sm@a.com");
            var po = new ProductOwner("PO", "po@a.com");
            var proj = new Project("Proj", po);
            var sprint = new Sprint("Dummy Sprint", DateTime.Now, DateTime.Now.AddDays(1), SprintType.Review, sm, proj);
            // Voeg wat data toe voor het rapport
            sprint.AddTeamMember(new Developer("Dev1", "d1@a.com"));
            sprint.AddBacklogItem(new BacklogItem("Item A", "Desc A"));
            return sprint;
        }




        [Fact]
        // Test voor AC-FR09.2: Given een Report object gedecoreerd met een HeaderDecorator / When GenerateContent wordt aangeroepen op de decorator / Then de geretourneerde string bevat zowel de header informatie als de basis rapport informatie.
        public void Test_AC_FR09_2_GenerateContent_Met_HeaderDecorator()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Rapport met Header", sprint);
            var headerDecorator = new HeaderDecorator(baseReport, "Avans BV");

            // Act
            var content = headerDecorator.GenerateContent();

            // Assert
            Assert.StartsWith("==================================================", content); // Header star
            Assert.Contains("Report Generated by: Avans BV", content); // Header info
            Assert.Contains("Report: Rapport met Header", content); // Basis info
        }

        [Fact]
        // Test voor AC-FR09.3: Given een Report object gedecoreerd met een FooterDecorator / When GenerateContent wordt aangeroepen op de decorator / Then de geretourneerde string bevat zowel de basis rapport informatie als de footer informatie.
        public void Test_AC_FR09_3_GenerateContent_Met_FooterDecorator()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Rapport met Footer", sprint);
            var footerText = "Vertrouwelijk Document";
            var footerDecorator = new FooterDecorator(baseReport, footerText);

            // Act
            var content = footerDecorator.GenerateContent();

            // Assert
            Assert.Contains("Report: Rapport met Footer", content); // Basis info
            Assert.Contains("--------------------------------------------------", content); // Footer lijnen
            Assert.Contains(footerText, content); // Footer tekst
            Assert.EndsWith("--------------------------------------------------\r\n", content.Replace("\r\n", "\n").Replace("\n", "\r\n")); // Eindigt met footer lijn (let op line endings)
        }

        [Fact]
        // Gerelateerd aan FR09: Decorators kunnen genest worden.
        public void GenerateContent_Met_Geneste_Decorators()
        {
            // Arrange
            var sprint = CreateDummySprint();
            var baseReport = new Report("Genest Rapport", sprint);
            var headerText = "Avans Hogeschool";
            var footerText = "Intern Gebruik";

            // Nesting: Footer(Header(Report))
            IReportComponent decoratedReport = new FooterDecorator(
                                                  new HeaderDecorator(baseReport, headerText),
                                                  footerText
                                              );

            // Act
            var content = decoratedReport.GenerateContent();

            // Assert
            Assert.StartsWith("==================================================", content); // Header start
            Assert.Contains(headerText, content); // Header info
            Assert.Contains("Report: Genest Rapport", content); // Basis info
            Assert.Contains(footerText, content); // Footer info
            Assert.EndsWith("--------------------------------------------------\r\n", content.Replace("\r\n", "\n").Replace("\n", "\r\n")); // Eindigt met footer lijn
        }

        // AC-FR09.4 en AC-FR09.5 testen de Strategy pattern uitvoering.
        // Dit vereist een ReportGenerator (of vergelijkbare logica) en mock strategieën.
        // Deze tests valideren dat de strategieën aangeroepen KUNNEN worden.

        [Fact]
        // Test voor AC-FR09.4: Given een IReportComponent en een PdfReportStrategy / When GenerateReport wordt aangeroepen op de strategie / Then de (gesimuleerde) PDF generatie logica wordt uitgevoerd.
        public void Test_AC_FR09_4_PdfReportStrategy_GenerateReport_Roept_Logica_Aan()
        {
            // Arrange
            var mockComponent = new Mock<IReportComponent>();
            mockComponent.Setup(c => c.GenerateContent()).Returns("Report Content");
            // We testen hier de concrete strategie, ervan uitgaande dat de simulatie daarin zit.
            var strategy = new PdfReportStrategy();
            var filePath = "test_report";

            // Act
            // In een echte test zou je de output (bv. Console.WriteLine of file I/O) mocken/verifiëren.
            // Hier testen we simpelweg dat de methode zonder fouten draait.
            var exception = Record.Exception(() => strategy.GenerateReport(mockComponent.Object, filePath));

            // Assert
            Assert.Null(exception); // Moet zonder fouten draaien
            mockComponent.Verify(c => c.GenerateContent(), Times.Once); // Controleer of content is opgehaald
        }

        [Fact]
        // Test voor AC-FR09.5: Given een IReportComponent en een PngReportStrategy / When GenerateReport wordt aangeroepen op de strategie / Then de (gesimuleerde) PNG generatie logica wordt uitgevoerd.
        public void Test_AC_FR09_5_PngReportStrategy_GenerateReport_Roept_Logica_Aan()
        {
            // Arrange
            var mockComponent = new Mock<IReportComponent>();
            mockComponent.Setup(c => c.GenerateContent()).Returns("Report Content");
            var strategy = new PngReportStrategy();
            var filePath = "test_report";

            // Act
            var exception = Record.Exception(() => strategy.GenerateReport(mockComponent.Object, filePath));

            // Assert
            Assert.Null(exception);
            mockComponent.Verify(c => c.GenerateContent(), Times.Once);
        }

        [Fact]
        // Gerelateerd aan FR09: Strategieën retourneren correct formaat.
        public void ReportStrategies_Return_Correct_Format()
        {
            // Arrange
            var pdfStrategy = new PdfReportStrategy();
            var pngStrategy = new PngReportStrategy();

            // Assert
            Assert.Equal(ReportFormat.Pdf, pdfStrategy.GetFormat());
            Assert.Equal(ReportFormat.Png, pngStrategy.GetFormat());
        }
    }
}
